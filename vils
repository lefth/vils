#!/bin/zsh

if [[ -n $VISUAL ]]; then
	VICMD=$VISUAL
elif [[ -n $EDITOR ]]; then
	VICMD=$EDITOR
else
	VICMD=vi
fi

if [[ $1 == -- ]]; then
	shift
elif [[ $1 == -f ]]; then
	FORCE=1
	shift
elif [[ $1 == -* ]]; then
	echo "Usage: ${0:t} [file ...]" >&2
	echo "The MOVE environment variable can be used to change the command used, for example:" >&2
	echo "    \$ MOVE='cp -i' ${0:t} [file ...]" >&2
	exit 1
fi

#   Do not use a publicly writable directory such as /tmp,
#   which would be a security hole because of possible
#   race conditions!
NAMES="$HOME/.${0:t}.$$.tmp"
Cleanup()
{
	rm -f $NAMES $NAMES.new
	exit 1
}
trap Cleanup 1 2 3 15

if [[ $# -gt 0 ]]; then
	FILES=( $@ )
else
	FILES=( * )
fi

COUNT=$#FILES
# For 15 files, the width would have to be "2", for IDs 01-15 (as opposed to 001-015)
WIDTH=$#COUNT
print -l -- $FILES | awk -v width=$WIDTH '{printf "%0" width "d %s\n", NR, $0}' > "$NAMES"
cp $NAMES $NAMES.new

$VICMD $NAMES.new

(
	cat $NAMES
	echo xxx
	cat $NAMES.new
) \
| awk -v width=$WIDTH '{
	if ($1 == "xxx")
		new=1;
	else if (!new)
		old[$1] = substr($0, width+2);
	else {
		new = substr($0, width+2);
		if (old[$1] && new && old[$1] != new)
			printf "%s\n%s\n", old[$1], new;
	}
}' \
| (
	while read OLD; do
		read NEW
		if [[ -n $FORCE ]]; then
		    ${=MOVE:-mv} -f -- $OLD $NEW
		else
			# Note: the "=" forces zsh to split words like bash does, to prevent "mv -i" from being a single command.
		    ${=MOVE:-mv -i} -- $OLD $NEW
		fi
	done
)

rm -f $NAMES $NAMES.new

